#!/usr/bin/env perl
# Created: 12 Jun 2015

use warnings;
use strict;

use Pod::Usage;
use Getopt::Long;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;
use FindBin qw($Script);
use File::Which;
use File::Basename;

use Sam::Parser;
use Sam::Alignment;

## Debug
use Data::Dumper;
$Data::Dumper::Sortkeys=1;

=head1 NAME

sam-tag

=head1 SYNOPSIS

sam-tag [options] args

=head1 OPTIONS

=over

=item

=back

=head1 MAIN

=cut


##----------------------------------------------------------------------------##
# Globals
##----------------------------------------------------------------------------##

our $VERSION = 0.1.0;

Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$Script.q(] %m%n
)));

my $L = Log::Log4perl->get_logger();


##----------------------------------------------------------------------------##
# Main
##----------------------------------------------------------------------------##

my %opt = prep();

my @tag = split(":", $opt{tag});
die "tag needs to be of format TAG:TYPE:VALUE" unless @tag == 3;

$L->info("Processing IDs from ". ($opt{ids} eq '-' ? "STDIN" : $opt{ids}));
my $ifh = $opt{ifh};
my %IDS;
while(<$ifh>){ chomp(); $IDS{$_}++;}


$L->info("Processing BAM/SAM");
my $ofh = $opt{ofh};
print $ofh "$opt{samtools} view -H $opt{sam}";
open(my $sfh, "$opt{samtools} view $opt{sam} |") or die $!;

my $sp = Sam::Parser->new(fh => $sfh);
while ( my $aln = $sp->next_aln ) {
    if(exists $IDS{$aln->qname}){
        $aln->opt(@tag);
    }
    print $ofh $aln;
}



##----------------------------------------------------------------------------##
# subs
##----------------------------------------------------------------------------##

=head2 prep

=cut

sub prep{
    my (%p) = @_;

    # GetOptions
    my $argv = join(" ", @ARGV);

    my %opt = (
        sam => undef,
        samtools_path => undef,
        samtools => undef,
        ids => '-',
        out => undef,
        tag => undef,
    );

    GetOptions(
        \%opt, qw(
                     sam=s
                     samtools_path=s
                     ids=s
                     out=s
                     tag=s
                     version|V!
                     debug|D!
                     help|h!
             )
    ) or $L->logcroak('Failed to "GetOptions"');

    $opt{argv} = $argv; # store it just in case

    # help
    $opt{help} && pod2usage(1);

    # version
    if ($opt{version}) {
        print "$VERSION\n";
        exit 0;
    }

    # Config + Opt
    $opt{sam} //= shift(@ARGV) if @ARGV;

    $L->logdie("unused argument: @ARGV") if @ARGV;

    # required stuff
    for (qw(sam tag)) {
       if (ref $opt{$_} eq 'ARRAY') {
           pod2usage("required: --$_") unless @{$opt{$_}}
       } else {
           pod2usage("required: --$_") unless defined ($opt{$_})
       }
    }

    if ( $opt{out} && $opt{out} ne '-' ){
        open(my $ofh, '>', $opt{out}) or $L->logdie("$!: $opt{out}");
        $opt{ofh} = $ofh;
    }else {
        $opt{ofh} = \*STDOUT;
    }

    if ( $opt{ids} && $opt{ids} ne '-' ){
        open(my $ifh, '<', $opt{ids}) or $L->logdie("$!: $opt{ids}");
        $opt{ifh} = $ifh;
    }else {
        $opt{ifh} = \*STDIN;
    }

    # debug level
    $L->level($DEBUG) if $opt{debug};
    $L->debug('Verbose level set to DEBUG');

    $L->debug(Dumper(\%opt));

    # check binaries
    my $samtools = bin("samtools");
    check_binary($samtools, ["--version", "1.1"]);
    $opt{samtools} = bin("samtools");

    return %opt;
}



=head2 bin

Return full binary path based on $opt{<bin_path}.

=cut

sub bin{
    my ($bin) = @_;
    if (exists $opt{$bin."_path"} && $opt{$bin."_path"}) {
        return $opt{$bin."_path"}."/".$bin;
    } else {
        return $bin;
    }
}


=head2 check_binary

Check whether a required binary (and version) exists.

=cut

sub check_binary{
    my($bin, $ver) = (@_);
    my $fbin = $bin;
    unless(-e $fbin && -x $fbin){
        if ($fbin = which($bin)) {
            $L->logdie("Binary '$fbin' not executable") unless -e $fbin && -x $fbin;
        } else {
            $L->logdie("Binary '$bin' neither in PATH nor executable");
        }
    }

    $bin = basename($fbin);

    my $v;
    if ($ver) {
        $L->logdie("ARRAY ref required") unless ref $ver eq "ARRAY";

        my $vs = qx($fbin $ver->[0]);
        if ($? or ! $vs) {
            $L->logdie("Couldn't determine version of $bin, at least $ver->[1] required");
        }

        ($v) = $vs =~ /(\S+?)\D*$/m;

        if (version->parse($v) < version->parse($ver->[1])) {
            $L->logdie("Version $v of '$bin' < $v");
        }

    }

    $L->info(sprintf("  [ok] %-15s %s", $bin.($v ? "-$v" : ""), dirname($fbin)));

}





=head1 AUTHOR

Thomas Hackl, E<lt>thackl@lim4.deE<gt>

=cut
