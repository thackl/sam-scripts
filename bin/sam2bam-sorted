#!/bin/bash

# -f INT   required flag, 0 for unset [0]
# -F INT   filtering flag, 0 for unset [0]
# -q INT   minimum mapping quality [0]
# -l STR   only output reads in library STR [null]
# -r STR   only output reads in read group STR [null]

# Execute getopt
ARGS=`getopt --name "sam2bam-sorted" \
    --options "f:F:q:l:r:o:h" \
    --longoptions "help" \
    -- "$@"`

#Bad arguments
[ $? -ne 0 ] && exit 1;

# A little magic
OPT=${ARGS% --*} # get pass-through options
eval set -- "${ARGS#* --}" # set args to $@

# usage
if [[ "$OPT" == *-h* || $# -gt 1 ]]; then
    echo "[sam2bam-sorted] Usage:" 1>&2;
    echo "  cat *.sam | sam2bam-sorted [sam-opt] >*.bam" 1>&2;
    echo "  cat *.sam | sam2bam-sorted [sam-opt] PREFIX" 1>&2;
    echo 1>&2;
    echo "if PREFIX is provided, bam will also be indexed" 1>&2;
    echo "accepted sam-options are -fFqlr" 1>&2;
    echo "see 'samtools view --help' for details" 1>&2;
    exit;
else
    echo "[sam2bam-sorted] Reading stdin" 1>&2;
fi;

OPTVIEW=$OPT

# stdout or prefix+index
if [[ $# -eq 0 ]]; then
    CMD="samtools view -ubS $OPTVIEW /dev/fd/0 | samtools sort -o /dev/fd/0 ''"
    echo "[sam2bam-sorted] $CMD" 1>&2;
    eval $CMD;

else
    PRE=${1%.bam}
    CMD="samtools view -ubS $OPTVIEW /dev/fd/0 | samtools sort /dev/fd/0 $PRE && samtools index $PRE.bam";
    echo "[sam2bam-sorted] $CMD" 1>&2;
    eval $CMD;

fi;
