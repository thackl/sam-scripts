#!/usr/bin/env perl
use warnings;
use strict;

use Pod::Usage;
use Getopt::Long;
use Log::Log4perl qw(:no_extra_logdie_message);
use Log::Log4perl::Level;

use List::Util;
use Data::Dumper;
use FindBin qw($Script);

use File::Basename;
use File::Which;

use Sam::Parser 0.11;
use Sam::Alignment 0.10 ':flags';
use Sam::Seq 0.16;

use Fasta::Parser;
use Fasta::Seq;

use Fastq::Parser;
use Fastq::Seq;

our $VERSION  = '0.1.0';



=head1 NAME

sam-filter

=cut

=head1 DESCRIPTION

Annotate possible junctions from bam file.

=head1 SYNOPSIS

  bam-junctions [options] BAM

=head1 OPTIONS

=over

=item [-a] [100]

Minimum length of aligned region.

=item [-o] [100]

Minimum overhang after junction.

=item [-c] [10]

Minimum coverage supporting junction.

=item [-d] [OFF]

Dump overhangs to files.

=item [-s] [50]

Report overhangs with sticky end of this length.

=item [-t] [5]

Ignore junctions in terminal regions of -t bp.

=item [-r]

Limit analysis to region of reference, use samtools style: CHR:FROM-TO

=item [-D/--debug]

Toggle verbose messages.

=item [-h/--help]

Display this help screen.

=item [-V/--version]

Display script version.

=back

=cut

##----------------------------------------------------------------------------##
# Globals

Log::Log4perl->init( \(q(
        log4perl.rootLogger                     = INFO, Screen
        log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
        log4perl.appender.Screen.stderr         = 1
        log4perl.appender.Screen.layout         = PatternLayout
        log4perl.appender.Screen.layout.ConversionPattern = [%d{yy-MM-dd HH:mm:ss}] [).$Script.q(] %m%n
)));

my $L = Log::Log4perl->get_logger();

##----------------------------------------------------------------------------##
# GetOptions

my $argv = join(" ", @ARGV);

my %def = ();

my %opt = (
#    bam => undef
    min_aln_len => 100,
    min_ovh_len => 100,
    min_jnt_cov => 10,
    sticky_len => 50,
    term_ignore => 5,
);

GetOptions(
    \%opt, qw(
                 min_aln_len|min-aln-len|a=i
                 min_ovh_len|min-ovh-len|o=i
                 min_jnt_cov|min-jnt-cov|c=i
                 sticky_len|s=i
                 dump|d!
                 term_ignore|t=i
                 region|r=s
                 out=s
                 bam=s
                 version|V!
                 debug!
                 help|h!
         )
) or $L->logcroak("Failed to 'GetOptions'");

# help
$opt{help} && pod2usage(1);

# version
if ($opt{version}) {
    print "$VERSION\n";
    exit 0;
}

##----------------------------------------------------------------------------##
# Config + Opt

%opt = (%def, %opt);

$opt{bam} = shift(@ARGV) if @ARGV;
$L->logdie("unused argument: @ARGV") if @ARGV;

$opt{out} = basename($opt{bam}, ".bam")."-junction-reads.fa" unless $opt{out};

# required stuff
for (qw(bam)) {
    if (ref $opt{$_} eq 'ARRAY') {
	pod2usage("required: --$_") unless @{$opt{$_}}
    } else {
	pod2usage("required: --$_") unless defined ($opt{$_})
    }
};


# debug level
$L->level($DEBUG) if $opt{debug};
$L->debug('Verbose level set to DEBUG');

$L->debug(Dumper(\%opt));


$L->info("Checking binaries");
# check DAZZ_DB binaries
my $samtools = bin("samtools");
check_binary($samtools, ["--version", "1.1"]);

##------------------------------------------------------------------------##

=head1 MAIN

=cut

# Sam::Seq->Trim($cfg{'sr-trim'});
# Sam::Seq->InDelTabooLength($cfg{'sr-indel-taboo-length'}, 1);
# Sam::Seq->InDelTaboo($cfg{'sr-indel-taboo'});
# Sam::Seq->MaxCoverage($opt_cov);
# Sam::Seq->BinSize($opt_bin_size);
# Sam::Seq->MaxInsLength($opt_max_ins_length);
# Sam::Seq->FallbackPhred($opt_fallback_phred) if defined($opt_fallback_phred);
# Sam::Seq->RepCoverage($opt{rep_coverage});
# Sam::Seq->MinScore($opt{min_score});
# Sam::Seq->MinNScore($opt{min_nscore});
# Sam::Seq->MinNCScore($opt{min_ncscore});

# Sam::Alignment->InvertScores($opt{invert_scores});


##----------------------------------------------------------------------------##
unless ( -e $opt{bam}.".bai" ) {
    my $sam_idx = "$samtools index $opt{bam}.bai";
    $L->debug($sam_idx);
    qx($sam_idx);
}

# init sam parser
my $sam_cmd = "$samtools view -H $opt{bam} |";
$L->debug($sam_cmd);
open(SAM, $sam_cmd) or $L->logdie($!);
my $sp = Sam::Parser->new(fh => \*SAM);

#my $sam_out = "| $samtools view -bo $opt{out} -";
#$L->debug($sam_out);
#open(OUT, $sam_out) or $L->logdie($!);
#select OUT;


##----------------------------------------------------------------------------##
# read header or region

my %R;
my @R_IDS;
my $region_id;

if ($opt{region}){
    ($region_id) = split(":", $opt{region});
}

while (my %h = $sp->next_header_line) {
    #print $h{raw};
    if (exists $h{SN}) {
        if ($region_id){
            next unless $h{SN} eq $region_id;
        }
        push @R_IDS, $h{SN};
        $R{$h{'SN'}} = {
            id => $h{SN},
            len => $h{LN},
        };
    }
}


$L->info("Scanning ".@R_IDS." sequences");

##----------------------------------------------------------------------------##
# read BAM

my $rn = @R_IDS;
my ($rc, $ac, $sc) = 0;
my $rc5 = int(($rn/20)+.5) || 1;
my $rc5c;
my $rcl = length($rn);

if ($opt{dump}) {
    open(OUT, ">", $opt{out}) or die $!;
}



foreach my $rid(@R_IDS){
    $rc++;
    #$L->info(sprintf(" %3d%% [%${rcl}d]", (++$rc5c * 5), $rc)) unless $rc % $rc5;
    my $region = $opt{region} // $rid;
    $L->info(">$region");
    open(SAM, "$samtools view $opt{bam} $region |") or $L->logdie($!);
    my $sp = Sam::Parser->new(fh => \*SAM);

    my $sso = Sam::Seq->new(
                         id => $R{$rid}{id},
                         len => $R{$rid}{len},
                        );
    my %apre;
    my %asuf;
    
    while(my $aln = $sp->next_aln()){
        next if $aln->is(UNMAPPED) or $aln->is(0x800); # unmapped or supplement
        $L->logdie("$rid ne $aln->rname") unless $rid eq $aln->rname;
        $ac++;

        # ignore non trimmed reads
        my ($pre, $suf) = $aln->cigar =~ /^(\d+)[SH]|(\d+)[SH]$/;
        next unless $pre || $suf;
        next if $aln->length < $opt{min_aln_len};

        push @{$apre{$aln->pos}}, $aln if $pre && $pre >= $opt{min_ovh_len};
        push @{$asuf{$aln->pos + length($aln->seq_aligned) -1 }}, $aln if $suf && $suf >= $opt{min_ovh_len};
    }

    $L->info("junctions with upstream overhang");
    
    # pre == 5' == upstream
    foreach my $j (sort{$a<=>$b}keys %apre) {
        if ($opt{term_ignore}) {
            next if $j<= $opt{term_ignore};
        }

        my $alns = $apre{$j};
        my $cov = @$alns;
        if ( $cov < $opt{min_jnt_cov} ){ next; }

        $L->info(sprintf("%9d %4d", $j, $cov));

        if ($opt{dump}) {
            my $k = 0;
            foreach my $aln (@$alns) {
                $k++;
                my ($l,$clip) = $aln->cigar =~ /^(\d+)([HS])/;
                if ( $clip eq "H" ){ next;}    #print STDERR "hard clipped, missing sequence (".$aln->qname.")\n";
                print OUT Fasta::Seq->new(
                    id => ">$region/u:$j:$k",
                    seq => $opt{sticky_len}<0
                        ? $aln->seq
                            : substr($aln->seq, 0, $l+$opt{sticky_len}),
                desc => $opt{sticky_len}<0
                        ? "SRC:".$aln->qname
                            :"SRC:".$aln->qname." SUBSTR:0,$l",
                )->string(80);
            }
        }
    }
    #print $sso->string(sorted=>1);
    close SAM;

    $L->info("junctions with downstream overhang");

    # suf == 3' == downstream
    foreach my $j (sort{$a<=>$b}keys %asuf) {
        if ($opt{term_ignore}) {
            next if $R{$rid}{len}-$j <= $opt{term_ignore};
        }

        my $alns = $asuf{$j};
        my $cov = @$alns;
        if ( $cov < $opt{min_jnt_cov} ){ next; }

        $L->info(sprintf("%9d %4d", $j, $cov));
        
        if ($opt{dump}) {
            my $k = 0;
            foreach my $aln (@$alns) {
                $k++;
                my ($l,$clip) = $aln->cigar =~ /(\d+)([HS])$/;
                if ( $clip eq "H" ) {
                    next;
                } #print STDERR "hard clipped, missing sequence (".$aln->qname.")\n";
                print OUT Fasta::Seq->new(
                    id => ">$region/d:$j:$k",
                    seq => $opt{sticky_len}<0
                        ? $aln->seq
                            : substr($aln->seq, -($l+$opt{sticky_len})),
                    desc => $opt{sticky_len}<0
                        ? "SRC:".$aln->qname
                            : "SRC:".$aln->qname." SUBSTR:". -($l+$opt{sticky_len}),
                )->string(80);
            }
        }
    }
    #print $sso->string(sorted=>1);
    close SAM;

}
#$L->info(sprintf(" %3d%% [%${rcl}d]", (++$rc5c * 5), $rc)) if $rc5c < 20;
#$L->info(sprintf("used %0.2f%% (%d/%d) of alignments", $sc/$ac*100, $sc, $ac));

#close OUT;

if ($opt{dump}) {
    close OUT;
}

=head2 bin

Return full binary path based on $opt{<bin_path}.

=cut

sub bin{
    my ($bin) = @_;
    if (exists $opt{$bin."_path"} && $opt{$bin."_path"}) {
        return $opt{$bin."_path"}."/".$bin;
    } else {
        return $bin;
    }
}


=head2 check_binary

Check whether a required binary (and version) exists.

=cut

sub check_binary{
    my($bin, $ver) = (@_);
    my $fbin = $bin;
    unless(-e $fbin && -x $fbin){
        if ($fbin = which($bin)) {
            $L->logdie("Binary '$fbin' not executable") unless -e $fbin && -x $fbin;
        } else {
            $L->logdie("Binary '$bin' neither in PATH nor executable");
        }
    }

    $bin = basename($fbin);

    my $v;
    if ($ver) {
        $L->logdie("ARRAY ref required") unless ref $ver eq "ARRAY";

        my $vs = qx($fbin $ver->[0]);
        if ($? or ! $vs) {
            $L->logdie("Couldn't determine version of $bin, at least $ver->[1] required");
        }

        ($v) = $vs =~ /(\S+?)\D*$/m;

        if (version->parse($v) < version->parse($ver->[1])) {
            $L->logdie("Version $v of '$bin' < $v");
        }

    }

    $L->info(sprintf("  [ok] %-15s %s", $bin.($v ? "-$v" : ""), dirname($fbin)));

}


=head1 AUTHORS

Thomas Hackl S<thomas.hackl@uni-wuerzburg.de>

=cut
